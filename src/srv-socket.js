var ProxySocket, SrvSocket, _, dns, socketIoClient, url,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

dns = require('dns');

_ = require('lodash');

socketIoClient = require('socket.io-client');

url = require('url');

ProxySocket = require('./proxy-socket');

SrvSocket = (function(superClass) {
  extend(SrvSocket, superClass);

  function SrvSocket(arg, dependencies) {
    var domain, hostname, port, protocol, ref, ref1, resolveSrv, secure, service, socketIoOptions;
    protocol = arg.protocol, hostname = arg.hostname, port = arg.port, service = arg.service, domain = arg.domain, secure = arg.secure, resolveSrv = arg.resolveSrv, socketIoOptions = arg.socketIoOptions;
    if (dependencies == null) {
      dependencies = {};
    }
    this._resolveUrlFromAddresses = bind(this._resolveUrlFromAddresses, this);
    this._resolveUri = bind(this._resolveUri, this);
    this._getSrvProtocol = bind(this._getSrvProtocol, this);
    this._getSrvConnectionProtocol = bind(this._getSrvConnectionProtocol, this);
    this._getSrvAddress = bind(this._getSrvAddress, this);
    this.send = bind(this.send, this);
    this.connect = bind(this.connect, this);
    this.close = bind(this.close, this);
    this._socketIoClient = (ref = dependencies.socketIoClient) != null ? ref : socketIoClient;
    this._dns = (ref1 = dependencies.dns) != null ? ref1 : dns;
    this._options = {
      protocol: protocol,
      hostname: hostname,
      port: port,
      service: service,
      domain: domain,
      secure: secure,
      resolveSrv: resolveSrv
    };
    this._socketIoOptions = _.defaults({}, socketIoOptions, {
      forceNew: true
    });
  }

  SrvSocket.prototype.close = function(callback) {
    this._socket.once('disconnect', (function(_this) {
      return function() {
        return callback();
      };
    })(this));
    return this._socket.close();
  };

  SrvSocket.prototype.connect = function(callback) {
    return this._resolveUri((function(_this) {
      return function(error, uri) {
        if (error != null) {
          return callback(error);
        }
        _this._socket = _this._socketIoClient(uri, _this._socketIoOptions);
        _this._socket.once('connect', function() {
          return callback();
        });
        return _this._proxyDefaultIncomingEvents();
      };
    })(this));
  };

  SrvSocket.prototype.send = function() {
    var ref;
    return (ref = this._socket).emit.apply(ref, arguments);
  };

  SrvSocket.prototype._getSrvAddress = function() {
    var domain, protocol, ref, service;
    ref = this._options, service = ref.service, domain = ref.domain;
    protocol = this._getSrvProtocol();
    return "_" + service + "._" + protocol + "." + domain;
  };

  SrvSocket.prototype._getSrvConnectionProtocol = function() {
    if (this._options.secure) {
      return 'wss';
    }
    return 'ws';
  };

  SrvSocket.prototype._getSrvProtocol = function() {
    if (this._options.secure) {
      return 'socket-io-wss';
    }
    return 'socket-io-ws';
  };

  SrvSocket.prototype._resolveUri = function(callback) {
    var hostname, port, protocol, ref, resolveSrv;
    ref = this._options, protocol = ref.protocol, hostname = ref.hostname, port = ref.port, resolveSrv = ref.resolveSrv;
    if (!resolveSrv) {
      return callback(null, url.format({
        protocol: protocol,
        hostname: hostname,
        port: port,
        slashes: true
      }));
    }
    return this._dns.resolveSrv(this._getSrvAddress(), (function(_this) {
      return function(error, addresses) {
        if (error != null) {
          return callback(error);
        }
        if (_.isEmpty(addresses)) {
          return callback(new Error('SRV record found, but contained no valid addresses'));
        }
        return callback(null, _this._resolveUrlFromAddresses(addresses));
      };
    })(this));
  };

  SrvSocket.prototype._resolveUrlFromAddresses = function(addresses) {
    var address;
    address = _.minBy(addresses, 'priority');
    return url.format({
      protocol: this._getSrvConnectionProtocol(),
      hostname: address.name,
      port: address.port,
      slashes: true
    });
  };

  return SrvSocket;

})(ProxySocket);

module.exports = SrvSocket;

// ---
// generated by coffee-script 1.9.2
