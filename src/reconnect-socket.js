var Backoff, DEFAULT_BACKOFF_MAX, DEFAULT_BACKOFF_MIN, DEFAULT_CONNECTION_TIMEOUT, ProxySocket, ReconnectSocket, SrvSocket, _,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Backoff = require('backo');

_ = require('lodash');

ProxySocket = require('./proxy-socket');

SrvSocket = require('./srv-socket');

DEFAULT_BACKOFF_MIN = 1000;

DEFAULT_BACKOFF_MAX = 60 * 60 * 1000;

DEFAULT_CONNECTION_TIMEOUT = 30000;

ReconnectSocket = (function(superClass) {
  extend(ReconnectSocket, superClass);

  function ReconnectSocket(options, dependencies) {
    var ref, ref1, ref2, ref3;
    if (options == null) {
      options = {};
    }
    if (dependencies == null) {
      dependencies = {};
    }
    this._reconnect = bind(this._reconnect, this);
    this._onNotReady = bind(this._onNotReady, this);
    this._onConnectionTimeout = bind(this._onConnectionTimeout, this);
    this.send = bind(this.send, this);
    this.connect = bind(this.connect, this);
    this.close = bind(this.close, this);
    this._connectionTimeout = (ref = options.connectionTimeout) != null ? ref : DEFAULT_CONNECTION_TIMEOUT;
    this._backoff = new Backoff({
      min: (ref1 = options.backoffMin) != null ? ref1 : DEFAULT_BACKOFF_MIN,
      max: (ref2 = options.backoffMax) != null ? ref2 : DEFAULT_BACKOFF_MAX
    });
    this.SrvSocket = (ref3 = dependencies.SrvSocket) != null ? ref3 : SrvSocket;
    this._socket = new this.SrvSocket(options.srvOptions);
    this._socket.on('notReady', this._onNotReady);
    ReconnectSocket.__super__.constructor.apply(this, arguments);
  }

  ReconnectSocket.prototype.close = function(callback) {
    return this._socket.close(callback);
  };

  ReconnectSocket.prototype.connect = function(callback) {
    var onConnectionTimeout;
    callback = _.once(callback);
    onConnectionTimeout = setTimeout(((function(_this) {
      return function() {
        return _this._onConnectionTimeout(callback);
      };
    })(this)), this._connectionTimeout);
    this._socket.connect((function(_this) {
      return function(error) {
        clearTimeout(onConnectionTimeout);
        return callback(error);
      };
    })(this));
    return setTimeout;
  };

  ReconnectSocket.prototype.send = function() {
    var ref;
    return (ref = this._socket).send.apply(ref, arguments);
  };

  ReconnectSocket.prototype._onConnectionTimeout = function(callback) {
    this.emit('notReady', {
      status: 504,
      message: 'Connection Timeout'
    });
    return callback(new Error('Connection Timeout'));
  };

  ReconnectSocket.prototype._onNotReady = function(data) {
    if (429 !== _.get(data, 'error.code')) {
      return;
    }
    return this._reconnect();
  };

  ReconnectSocket.prototype._reconnect = function() {
    var duration, randomFloat;
    randomFloat = _.random(1, 5, true);
    duration = this._backoff.duration() * randomFloat;
    clearTimeout(this._reconnectTimeout);
    return this._reconnectTimeout = setTimeout(this._socket.connect, duration);
  };

  return ReconnectSocket;

})(ProxySocket);

module.exports = ReconnectSocket;

// ---
// generated by coffee-script 1.9.2
